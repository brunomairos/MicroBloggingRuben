/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package microbloggingruben;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author rcunha
 */
public class UImicroblogging extends javax.swing.JFrame {

    private DefaultListModel<String> model3 = new DefaultListModel<>();
    private DefaultListModel<String> model2 = new DefaultListModel<>();
    private DefaultListModel<String> model1 = new DefaultListModel<>();
    private Utilizador utilizador;

    /**
     * Creates new form UImicroblogging Com o parâmetro o utilizador autenticado
     */
    public UImicroblogging(Utilizador utilizador) {
        this.utilizador = utilizador;
        initComponents();
        //Para aparecer no meio do ecrã
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        jLabel1.setText("Bem Vindo " + utilizador.getNome());
        jLabel4.setText("@" + utilizador.getNickname());
        jLabel2.setText(Utilizador.getNutilizadores() + " Utilizadores");
        jLabel3.setText(utilizador.getnSeguindo() + " Seguindo");
        jLabel5.setText(utilizador.getnPosts() + " Posts");
        preencherListaUtilizadores();
        preencherListaUtilizadoresSeguindo(utilizador);
        preencherListaUtilizadoresOutros(utilizador);
        preencherListaPosts(utilizador, false);

        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Bem Vindo Ruben Cunha");

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Publicar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setToolTipText("");

        jLabel3.setToolTipText("");

        jLabel4.setText("@shadow");

        jLabel5.setToolTipText("");

        jLabel6.setToolTipText("");

        jList2.setToolTipText("");
        jScrollPane2.setViewportView(jList2);

        jButton2.setText("Seguir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jList3);

        jButton3.setText("Deixar de Seguir");

        jButton4.setText("Pesquisar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String msg = jTextField1.getText();
        if (msg != null && !msg.equals("") && msg.length() <= 140) {
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy - HH:mm");
            Date date = new Date();
            //Adicionar Post em memória
            new NodePost(utilizador, new Post(dateFormat.format(date), msg));
            String post = dateFormat.format(date) + " " + msg;
            //Coloca-lo na lista de posts
            model1.add(0, post);
            //Gravar no ficheiro de posts
            utilizador.setnPosts(utilizador.getnPosts() + 1);
            jLabel5.setText(utilizador.getnPosts() + " Posts");

            Ficheiro f1 = new Ficheiro();

            try {
                f1.abreEscrita(utilizador.getNickname() + ".txt", true);
                f1.escreveLinha(dateFormat.format(date) + "§" + msg);
                f1.fechaEscrita();
            } catch (IOException ex) {

            }

        } else {
            if (msg.length() > 140) {
                JOptionPane.showMessageDialog(null, "Introduza Posts até 140 carateres.");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        model1.removeAllElements();
        String selecao = (String) jComboBox1.getSelectedItem();
        String hashtags = jTextField2.getText();

        if (selecao.equals("Todos")) {
            if (hashtags == null || hashtags.equals("")) {
                preencherListaPosts(utilizador, true);
            } else {
                //procurar pelas hashtag nos posts de todos
                String[] hashtagsSplit = hashtags.split(";");
                preencherListaPostsHastags(utilizador, true, hashtagsSplit);
            }
        } else {
            if (selecao.equals("Seguidos")) {
                if (hashtags == null || hashtags.equals("")) {
                    preencherListaPosts(utilizador, false);
                } else {
                    String[] hashtagsSplit = hashtags.split(";");
                    preencherListaPostsHastags(utilizador, false, hashtagsSplit);
                }
            } else {
                NodeUtilizador nodeUtilizador = Utilitarios.pesquisarUtilizadorNickName(selecao);
                NodePost noPost = nodeUtilizador.getUtilizador().getPrimeiroPost();
                Post post;
                if (hashtags == null || hashtags.equals("")) {
                    while (noPost != null) {
                        post = noPost.getPost();
                        model1.addElement(post.getDataHora() + "   " + post.getMsg());
                        noPost = noPost.getProximoPost();
                    }
                } else {
                    String[] hashtagsSplit = hashtags.split(";");
                    int nhashtags = hashtagsSplit.length;
                    while (noPost != null) {
                        post = noPost.getPost();
                        for (int i = 0; i < nhashtags; i++) {
                            if (post.gethashtags().contains(hashtagsSplit[i])) {
                                model1.addElement(post.getDataHora() + "   " + post.getMsg());
                                break;
                            }
                        }
                        noPost = noPost.getProximoPost();
                    }

                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for (String item : jList2.getSelectedValuesList()) {
            NodeUtilizador nUtilizadorSeguido = Utilitarios.pesquisarUtilizadorNickName(item);
            //Criar um novo nó associado ao utilizador com o utilizador a seguir, fica ligado ao que já
            //existe ou fica como primeiro
            new NodeUtilizador(utilizador, nUtilizadorSeguido.getUtilizador());
            utilizador.setnSeguindo(utilizador.getnSeguindo() + 1);
        }
        model1.removeAllElements();
        model2.removeAllElements();
        model3.removeAllElements();
        jLabel3.setText(utilizador.getnSeguindo() + " Seguindo");
        preencherListaUtilizadoresSeguindo(utilizador);
        preencherListaUtilizadoresOutros(utilizador);
        preencherListaPosts(utilizador, false);
        AtualizarFichSeguidos();

    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void preencherListaUtilizadores() {
        jComboBox1.addItem("Seguidos");
        NodeUtilizador no = MicroBloggingRuben.primeiroUtilizador;
        while (no != null) {
            jComboBox1.addItem(no.getUtilizador().getNickname());
            no = no.getProximoUtilizador();
        }
        jComboBox1.addItem("Todos");
        jComboBox1.setSelectedIndex(0);
    }

    private void preencherListaUtilizadoresSeguindo(Utilizador utilizador) {
        jList3.setModel(model3);
        NodeUtilizador no = utilizador.getPrimeiroUtilizadorSeguido();
        Utilizador utilizadorseguindo;
        while (no != null) {
            utilizadorseguindo = (Utilizador) no.getUtilizador();
            model3.addElement(utilizadorseguindo.getNickname());
            no = no.getProximoUtilizador();
        }
    }

    private void preencherListaUtilizadoresOutros(Utilizador utilizador) {
        jList2.setModel(model2);
        NodeUtilizador no = MicroBloggingRuben.primeiroUtilizador;
        Utilizador utilizadorRegistado;
        Utilizador utilizadorSeguindo;
        boolean seguido = false;
        while (no != null) {
            if (!no.getUtilizador().getNickname().equals(utilizador.getNickname())) {
                NodeUtilizador noSeguindo = utilizador.getPrimeiroUtilizadorSeguido();
                utilizadorRegistado = (Utilizador) no.getUtilizador();
                while (noSeguindo != null && seguido == false) {
                    utilizadorSeguindo = (Utilizador) noSeguindo.getUtilizador();
                    if (utilizadorRegistado.getNickname().equalsIgnoreCase(utilizadorSeguindo.getNickname())) {
                        seguido = true;
                    }
                    noSeguindo = noSeguindo.getProximoUtilizador();
                }
                if (seguido == false) {
                    model2.addElement(utilizadorRegistado.getNickname());
                }
                seguido = false;
            }
            no = no.getProximoUtilizador();

        }
    }

    private void preencherListaPosts(Utilizador utilizador, boolean todos) {
        jList1.setModel(model1);
        //Posts de todos ou dos seguidos
        NodeUtilizador noSeguido;
        NodePost noPost;
        if (todos == true) {
            noSeguido = MicroBloggingRuben.primeiroUtilizador;
        } else {
            //Posts do utilizador
            noPost = utilizador.getPrimeiroPost();
            while (noPost != null) {
                Post post = noPost.getPost();
                model1.addElement(post.getDataHora() + "   " + post.getMsg());
                noPost = noPost.getProximoPost();
            }
            noSeguido = utilizador.getPrimeiroUtilizadorSeguido();
        }
        while (noSeguido != null) {
            Utilizador utilizadorSeguido = noSeguido.getUtilizador();
            noPost = utilizadorSeguido.getPrimeiroPost();
            while (noPost != null) {
                Post post = noPost.getPost();
                model1.addElement(post.getDataHora() + "   " + post.getMsg());
                noPost = noPost.getProximoPost();
            }
            noSeguido = noSeguido.getProximoUtilizador();
        }

    }

    private void preencherListaPostsHastags(Utilizador utilizador, boolean todos, String[] hashtags) {
        //Posts de todos ou dos seguidos
        NodeUtilizador noSeguido;
        NodePost noPost;
        int nhashtags = hashtags.length;
        if (todos == true) {
            noSeguido = MicroBloggingRuben.primeiroUtilizador;
        } else {
            //Posts do utilizador
            noPost = utilizador.getPrimeiroPost();
            while (noPost != null) {
                Post post = noPost.getPost();
                for (int i = 0; i < nhashtags; i++) {
                    if (post.gethashtags().contains(hashtags[i])) {
                        model1.addElement(post.getDataHora() + "   " + post.getMsg());
                        break;
                    }
                }
                noPost = noPost.getProximoPost();
            }
            noSeguido = utilizador.getPrimeiroUtilizadorSeguido();
        }
        while (noSeguido != null) {
            Utilizador utilizadorSeguido = noSeguido.getUtilizador();
            noPost = utilizadorSeguido.getPrimeiroPost();
            while (noPost != null) {
                Post post = noPost.getPost();
                for (int i = 0; i < nhashtags; i++) {
                    if (post.gethashtags().contains(hashtags[i])) {
                        model1.addElement(post.getDataHora() + "   " + post.getMsg());
                        break;
                    }
                }
                noPost = noPost.getProximoPost();
            }
            noSeguido = noSeguido.getProximoUtilizador();
        }

    }

    public void AtualizarFichSeguidos() {

        Ficheiro f1 = new Ficheiro();
        try {

            //Acrescentado o parâmetro true para permitir acrescentar linhas sem apagar o ficheiro existente.
            f1.abreEscrita("seguidores.txt", false);
            //Ciclo para acrescentar todos os seguidos pelo utilizador.Criar String com todos os nickNames dos
            //utilizadores seguidos
            NodeUtilizador no = MicroBloggingRuben.primeiroUtilizador;
            while (no != null) {
                NodeUtilizador noSeguido = no.getUtilizador().getPrimeiroUtilizadorSeguido();
                String seguidos = "§";
                while (noSeguido != null) {
                    seguidos = seguidos + noSeguido.getUtilizador().getNickname();
                    noSeguido = noSeguido.getProximoUtilizador();
                    if (noSeguido != null) {
                        seguidos = seguidos + "§";
                    }
                }
                if (!seguidos.equals("§")) {
                    f1.escreveLinha(no.getUtilizador().getNickname() + seguidos);
                }
                no = no.getProximoUtilizador();
            }
            f1.fechaEscrita();

        } catch (IOException ex) {

        }
    }
}
